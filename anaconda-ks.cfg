# Generated by Anaconda 41.35
# Generated by pykickstart v3.58
#version=DEVEL

# Keyboard layouts
keyboard --vckeymap=pl --xlayouts='pl'
# System language
lang pl_PL.UTF-8 --addsupport=en_US.UTF-8

# Network information
network  --bootproto=dhcp --device=eth0 --ipv6=auto --activate

# Mirror to Fedora 41
url --mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=fedora-41&arch=x86_64
repo --name=updates --mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=updates-released-f41&arch=x86_64

%packages
@^server-product-environment
docker
curl
%end

# Run the Setup Agent on first boot
#firstboot --enable
firstboot --disable

# Generated using Blivet version 3.11.0
ignoredisk --only-use=sda
autopart

# Partition clearing information
#clearpart --none --initlabel
clearpart --all --initlabel

# System timezone
timezone Europe/Warsaw --utc

#Root password
rootpw --lock
user --groups=wheel --name=dk --password=$y$j9T$itVxhkHSDZzU7lpOpePXkLtb$OkDSrQVIABMa2AP2rOclTyaWp59ymJSQsWMehmLdrH6 --iscrypted --gecos="Dominik K"


%post --log=/root/ks-post.log
set -euxo pipefail  

# Instalacja i uruchomienie dockera
systemctl enable docker

# katalog roboczy
cat >/usr/local/sbin/build_and_run_artifact.sh <<'EOS'
#!/usr/bin/env bash
set -euxo pipefail

WHEEL_URL="https://raw.githubusercontent.com/TinyCabin/pytest-examples-fork/refs/heads/main/pytest_examples-0.0.18-py3-none-any.whl"
WORKDIR=/opt/deploy_whl

mkdir -p "$WORKDIR"
cd "$WORKDIR"

# Pobierz plik wheel
curl -L -o artifact.whl "$WHEEL_URL"

#  Dockerfile
cat >Dockerfile <<'EOF'
FROM python:3.11-slim
COPY artifact.whl /packages/
RUN pip install /packages/artifact.whl
CMD ["python3", "-c", "import pytest_examples, os, sys; print('Running version', pytest_examples.__version__)"]
EOF

# Zbuduj i uruchom
docker build -t artifact_image .
docker run -d --restart=always --name artifact_container artifact_image
EOS

chmod +x /usr/local/sbin/build_and_run_artifact.sh

#Po starcie Dockera
cat >/etc/systemd/system/artifact.service <<'EOF'

[Unit]
Description=Build and run artifact_image
Requires=docker.service
After=docker.service network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/local/sbin/build_and_run_artifact.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

# 4. Włącz unit
systemctl enable artifact.service
%end
